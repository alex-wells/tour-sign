<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <framework name="qpcpp"/>
 <package name="components" stereotype="0x02" namespace="uk.org.nottinghack.tour-sign"/>
 <directory name=".">
  <file name="bsp.h"/>
  <file name="bsp.cpp"/>
  <file name="ao_tour_sign.cpp"/>
  <file name="tour_sign.h">
   <text>#ifndef tour_sign_h
#define tour_sign_h

using namespace QP;

enum TourSignSignals {
    MODE_SIG = Q_USER_SIG,
    MAX_PUB_SIG,  // the last published signal

    ON_SIG,
    OFF_SIG,
    TIMEOUT_SIG,
};

// active objects ..................................................
$declare(components::AO_TourSign)   // &quot;opaque&quot; pointer to Pelican AO

#endif // tour_sign_h</text>
  </file>
  <file name="tour_sign.ino">
   <text>#include &quot;qp_port.h&quot;
#include &quot;tour_sign.h&quot;
#include &quot;bsp.h&quot;

#include &quot;Arduino.h&quot;

// Local-scope objects -------------------------------------------------------
static QEvt const *l_tourSignQueueSto[2];
static QSubscrList l_subscrSto[MAX_PUB_SIG];

static QF_MPOOL_EL(QEvt) l_smlPoolSto[10]; // storage for the small event pool

//............................................................................
void setup() {
    BSP_init();                                          // initialize the BSP

    QF::init();       // initialize the framework and the underlying RT kernel

                                                  // initialize event pools...
    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));     // init publish-subscribe

                                                // start the active objects...
    AO_TourSign-&gt;start(1U, l_tourSignQueueSto, Q_DIM(l_tourSignQueueSto),
                      (void *)0, 0U);
}

//////////////////////////////////////////////////////////////////////////////
// NOTE: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino</text>
  </file>
 </directory>
</model>
